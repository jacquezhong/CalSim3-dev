!***************************************************************************************************************************************
!<license>
!    Copyright (C) 2017, 2018 State of California, Department of Water Resources. This file is part of the CalSim 3.

!    The CalSim 3 is free software: !<license>

!    you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free
!    Software Foundation, either version 3 of the License, or(at your option) any later version.

!    CalSim 3 is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
!    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

!    You should have received a copy of the GNU General Public License along with CalSim 3.  If not, see <http://www.gnu.org/licenses>.
!</license>
!****************************************************************************************************************************************

! E.Reyes 6/26/98
! A. Munevar 11/13/99

! Defines Standard allowable & Max allowable pumping at Banks.  Banks can increase pumping
! up to 1/3 of San Joaquin River flow at Vernalis if flow at Vernalis is greater than 1000 cfs.

!   If SJR flow @ Vernalis > 1000 cfs then,
!   Banks_max_allow = Banks_standard_allow + 1/3*(SJR @ Vernalis)
!   But only upto physical capacity.

! Number of days in which the Banks limit *IS* increased by 1/3 of SJR flow
define BanksDaysIncr {
       select   DaysIncr
       from    BanksLimits
       where   month=month
}

! Number of days in which the Banks limit *IS NOT* increased by 1/3 of SJR flow
define BanksDaysNoIncr { value daysin - BanksDaysIncr}

! Finds the Max Pump Capacity with the allowable increase
!define BanksCapPermit2 {select PermitCap2 from BanksLimits where month=month}
define BanksMax1 {
    case Increase {
         condition  C639[VAMP_AND_DO] > 1000.0
         value      max(BanksCapPermit,
                        min(BanksCapPermit1 + C639[VAMP_AND_DO]/3.0, BanksCapPermit2) - ReservedCap) }
    case NoIncrease {
         condition  always
         value      BanksCapPermit }
}

! Limit Pumping
! to allowable, weight for days in which increase is allowed
define BanksMaxAllow {value BanksMax1*BanksDaysIncr/daysin + BanksCapPermit*BanksDaysNoIncr/daysin }

! Limit Pumping to Allowable and Physical Capacity, whichever is less
goal banksLessThanAllow { D419_SWP_TD + D419_CVP_TD + D419_WTS_TD1 < BanksMaxAllow}
goal banksLessThanPhys  { D419 < BanksCapPhys}

! Limit Pumping with added WTS 
goal banksLessThanResrvd { D419_SWP_TD + D419_CVP_TD + D419_WTS_TD
                          < BanksMaxAllow + ReservedCap}

! Output Allowable Pumping Cap for Checking Only
define BanksAllowOut {alias BanksMaxAllow kind 'FLOW-ALLOW-BANKS' UNITS 'CFS' }

! Banks PP Minimum Cap
define banksminpump {value 300.}
define banksminpumpdv {alias banksminpump kind 'health-safety' units 'cfs'}

goal setbanksminpump {
    lhs D419_SWP
    rhs banksminpump
    lhs>rhs penalty 0
    lhs<rhs penalty 2700
}

