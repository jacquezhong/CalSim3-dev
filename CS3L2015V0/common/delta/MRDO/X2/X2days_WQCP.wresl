!***************************************************************************************************************************************
!<license>
!    Copyright (C) 2017, 2018 State of California, Department of Water Resources. This file is part of the CalSim 3.

!    The CalSim 3 is free software: !<license>

!    you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free
!    Software Foundation, either version 3 of the License, or(at your option) any later version.

!    CalSim 3 is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
!    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

!    You should have received a copy of the GNU General Public License along with CalSim 3.  If not, see <http://www.gnu.org/licenses>.
!</license>
!****************************************************************************************************************************************

! X2 setup for WQCP requirements

! set minimum flow
define flowmin_DecA4 {value 0.}

! set the flow cap for each station (cfs). this is max flow to meet X2 at each station
define flowcap_roe {value 29200. }     ! cfs for Roe Island/Port Chicago
define flowcap_chs {value 11400. }     ! cfs for Chipps Island
define flowcap_cnf {value 7100.  }     ! cfs for Confluence (Sac & SJR)

! set the trigger value which activates the operation of Roe X2 standard
define trigger_x2roe {value 66.3 } ! km to just beyond Roe Island

! set the minimum flow for the circumstances in which there is no requirement at the confluence
!   ie. May_SRI < 8.1 maf, then no X2 standard
define flowmin_specX2 {value 4000. }         ! cfs for months (feb-june) in which no confluence req

! ******************************************************************************************
! Get the days required for X2 at each location (Roe, Chipps, Confluence)

define daysX2_chs {
     case FebtoJun {
          condition      month >= FEB .and. month <= JUN
          select         chs_days
          from           x2days
          where          wateryear=wateryear,month=month    }
     case StandardOff {
          condition      always
          value          0.    }
}
define daysX2_cnf {
     case FebtoJun {
          condition      month >= FEB .and. month <= JUN
          select         cnf_days
          from           x2days
          where          wateryear=wateryear,month=month    }
     case StandardOff {
          condition      always
          value          0.    }
}

define daysX2_roeTB {
     case FebtoJun {
          condition      month >= FEB .and. month <= JUN
          select         roe_days
          from           x2days
          where          wateryear=wateryear,month=month    }
     case StandardOff {
          condition      always
          value          0.    }
}


define daysX2_roe {
     case FebtoJun {
          condition      month >= FEB .and. month <= JUN
          value min( daysX2_roeTB, daysX2_chs) }
     case StandardOff {
          condition      always
          value          0.    }
}


! ******************************************************************************************
! Modify the days at each location depending on whether the trigger for Roe has been tripped
! If   X2last > trigger then,
!              roe_days=0, chs_days=orig, cnf_days=daysinperiod - chs_days
! If   X2last < trigger then,
!              roe_days=orig, chs_days=orig-roe_days, cnf_days=daysin period-chs_days-roe_days
!
! NOTE: THE DAY MODIFICATION ASSUMES THAT CHS_DAYS >= ROE_DAYS.  IE.  WHEN YOU MEET ROE YOU
! AUTOMATICALLY MEET CHIPPS. BE SURE TABLE 'X2DAYS' IS SET PROPERLY.

define daysX2_roe_mod {
     case RoeOff {
         condition      x2_last > trigger_x2roe
          value          0.    }
     case RoeOn {
          condition      always
          value          daysX2_roe  }
}
define daysX2_chs_mod {
     case RoeOff {
          condition      x2_last > trigger_x2roe
          value          daysX2_chs  }
     case RoeOn {
          condition      always
          value          daysX2_chs - daysX2_roe  }
}
define daysX2_cnf_mod {
    case SpecialStd {
        condition       daysX2_cnf > 0.5
        value           daysin - daysX2_chs_mod - daysX2_roe_mod  }     ! days here make up the balance
    case StandardOff {                                                      ! for the period unless the original
        condition       always                                              ! days at cnf are zero.  in this case
        value           0.   }                                              ! there is no standard!!
}
define modroeday {alias daysX2_roe_mod kind 'debug' units 'none'}
define modchsday {alias daysX2_chs_mod kind 'debug' units 'none'}
define modcnfday {alias daysX2_cnf_mod kind 'debug' units 'none'}

! ******************************************************************************************
