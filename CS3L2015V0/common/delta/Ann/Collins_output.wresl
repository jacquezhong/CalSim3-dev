!***************************************************************************************************************************************
!<license>
!    Copyright (C) 2017, 2018 State of California, Department of Water Resources. This file is part of the CalSim 3.

!    The CalSim 3 is free software: !<license>

!    you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free
!    Software Foundation, either version 3 of the License, or(at your option) any later version.

!    CalSim 3 is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
!    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

!    You should have received a copy of the GNU General Public License along with CalSim 3.  If not, see <http://www.gnu.org/licenses>.
!</license>
!****************************************************************************************************************************************

! R.Wilbur & S. Wu 5/10/05

!****************************************************************************************

! maximum export given the sacramento river flow

define CO_MaxExport {lower unbounded upper unbounded kind 'FLOW' units 'CFS'}
goal setCOMax {
  lhs CO_MaxExport
  case NoSalinityControlPossible{
    condition abs(CO_m_sv) <= 0.001 .and. int(CO_b_sv) == 0
    rhs ExportCap}
  case NegSlope {
    condition CO_m_sv <= 0.0
    rhs 999999.}
  case HighCost{
    condition CO_Sac_ZeroExp_sv2 >= ANNcap
    rhs ExportCap}
  case NegCarriage{
    condition CO_m_sv >= 1.0
    rhs 999999.}
  case Normal {
    condition always
    rhs CO_m_sv*C_SACtot_ANN + CO_b_sv}
}

!****************************************************************************************

! required delta outflow given exports

define CO_MRDO {lower unbounded upper unbounded kind 'FLOW' units 'CFS'}
goal setCOmrdo {
  lhs CO_MRDO
  case NoSalinityControlPossible{
    condition abs(CO_m_sv) <= 0.001 .and. int(CO_b_sv) == 0
    rhs 0.}
  case NegSlope {
    condition CO_m_sv <= 0.0
    rhs 0.}
  case HighCost{
    condition CO_Sac_ZeroExp_sv2 >= ANNcap
    rhs 0.}
  case NegCarriage{
    condition CO_m_sv >= 1.0
    rhs 0.}
  case Normal {
    condition always
    rhs ((1-CO_m_sv)/CO_m_sv)*ExportActualTD- ((1-CO_m_sv)/CO_m_sv)*D419_wts_stg1 - ((1-CO_m_sv)/CO_m_sv)*D419_cvcrels
    - ((1-CO_m_sv)/CO_m_sv)*D419_whlrels - CO_b_sv/CO_m_sv
    + C_SJR056 + SR_61_SJR053 + SG_SJR048_576 + C_FCS006 + SR_61_SJR043 + SG_SJR042_567 + R_STWWTP_SJR042 + SG_SJR038_558
    + C_CLV004 + R514 + SR_60N_SJR038 + SR_60S_SJR038 + SG_SJR033_553 + SG_SJR028_543 + R_60N_NA3_SJR028 + R_WSWWTP_SJR028
    + SR_60N_SJR028 + SR_60S_SJR028 - D_SJR028_WTPDWS + SG_SJR023_540 + SG_SJR022_520 + R_60N_NA4_SJR022 + SR_60N_SJR022
    + SG_SJR013_534 + SG_SJR009_533 + SG_SJR006_532 - D_SJR006_ANTOC + SR_71_OMR039 + R_TCWWTP_OMR039 + R_RFS71A_OMR039 + C_LOSVQ
    + C_MOK019 + SR_26S_MOK014 + SG197_MOK014_30 + SG198_MOK004_30 + SG386_SAC036_67 + SG387_SAC030_67 + SG388_SAC022_67 + SG389_SAC017_67 + SG413_SAC017_71
    + SG414_SAC011_71 + SG415_SAC007_71 + SG416_SAC003_71 + SG417_SAC000_71 + SG418_SAC000_72 + I_MSH015 + CT_Woodland - C_CSL004B - D408 - net_delta_cu}
}

!****************************************************************************************

! required sac flow given exports

define CO_ReqSac {lower unbounded upper unbounded kind 'FLOW' units 'cfs'}
goal set_CO_ReqSac {
  lhs CO_ReqSac
  case NoSalinityControlPossible{
    condition abs(CO_m_sv) <= 0.001 .and. int(CO_b_sv) == 0
    rhs 0.}
  case NegSlope {
    condition CO_m_sv <= 0.0
    rhs 0.}
  case HighCost{
    condition CO_Sac_ZeroExp_sv2 >= ANNcap
    rhs 0.}
  case NegCarriage{
    condition abs(CO_m_sv) >= 1.0
    rhs 0.}
  case Normal {
    condition always
    rhs ExportActualTD/CO_m_sv - CO_b_sv/CO_m_sv}
}
