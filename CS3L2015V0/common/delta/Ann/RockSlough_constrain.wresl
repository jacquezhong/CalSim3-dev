!***************************************************************************************************************************************
!<license>
!    Copyright (C) 2017, 2018 State of California, Department of Water Resources. This file is part of the CalSim 3.

!    The CalSim 3 is free software: !<license>

!    you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free
!    Software Foundation, either version 3 of the License, or(at your option) any later version.

!    CalSim 3 is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
!    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

!    You should have received a copy of the GNU General Public License along with CalSim 3.  If not, see <http://www.gnu.org/licenses>.
!</license>
!****************************************************************************************************************************************

! R.Wilbur & S. Wu 5/10/05

!*****Linearization #1***************************************************************
goal meetRS_1 {
  lhs D409 + D408_P
  case LowCL{
    condition C_SAC041_ANN(-1) >=40000.
    rhs 999999.
    lhs<rhs penalty 0}
  /*case LowCL2{
    condition RS_EC_Month_sv <=50 .and. C_SAC041_ANN(-1) >=25000.
    rhs 999999.
    lhs<rhs penalty 0}*/
  /*case FebCritRelax{
    condition month==FEB .and. wyt_SAC==Critical .and. abs(RS_m_1_sv) >= 1.5
    rhs 999999.
    lhs<rhs penalty 0}*/
  /*case CritRelax{
    condition wyt_SAC==Critical .and. RS_m_1_sv >= 1.0
    rhs 999999.
    lhs<rhs penalty 0}*/
  case NoSalinityControlPossible{
    condition abs(RS_m_1_sv) <= 0.001 .and. int(RS_b_1_sv) == 0
    rhs 999999
    lhs<rhs penalty 0}
  case NegSlope{
    condition RS_m_1_sv <= 0.0
    rhs 999999.
    lhs<rhs penalty 0}
  case HighCost{
    condition RS_Sac_ZeroExp_sv2 >= ANNcap
    rhs ExportCap
    lhs<rhs penalty 0}
  case LargeNegInt{
    condition RS_b_1_sv < -10000.0
    rhs 999999.
    lhs<rhs penalty 0}
  case Normal {
    condition always
    rhs RS_m_1_sv*C_SACtot_ANN + RS_b_1_sv
    lhs<rhs penalty 0}
}

!*****Linearization #2***************************************************************
goal meetRS_2 {
  lhs D409 + D408_P
  case LowCL{
    condition C_SAC041_ANN(-1) >=40000.
    rhs 999999.
    lhs<rhs penalty 0}
  /*case LowCL2{
    condition RS_EC_Month_sv <=50 .and. C_SAC041_ANN(-1) >=25000.
    rhs 999999.
    lhs<rhs penalty 0}*/
  case NoSalinityControlPossible{
    condition abs(RS_m_2_sv) <= 0.001 .and. int(RS_b_2_sv) == 0
    rhs ExportCap
    lhs<rhs penalty 0}
  case NegSlope{
    condition RS_m_2_sv <= 0.0
    rhs 999999.
    lhs<rhs penalty 0}
  case HighCost{
    condition RS_Sac_ZeroExp_sv2 >= ANNcap
    rhs ExportCap
    lhs<rhs penalty 0}
  case LargeNegInt{
    condition RS_b_2_sv < -10000.0
    rhs 999999.
    lhs<rhs penalty 0}
  case NegCarriage{
    condition RS_m_2_sv >= 1.0
    rhs 999999.
    lhs<rhs penalty 0}
  case Normal {
    condition always
    rhs RS_m_2_sv*C_SACtot_ANN + RS_b_2_sv
    lhs<rhs penalty 0}
}

!*****Linearization #3***************************************************************
goal meetRS_3 {
  lhs D409 + D408_P
  case LowCL{
    condition C_SAC041_ANN(-1) >=40000.
    rhs 999999.
    lhs<rhs penalty 0}
  /*case LowCL2{
    condition RS_EC_Month_sv <=50 .and. C_SAC041_ANN(-1) >=25000.
    rhs 999999.
    lhs<rhs penalty 0}*/
  case NoSalinityControlPossible{
    condition abs(RS_m_3_sv) <= 0.001 .and. int(RS_b_3_sv) == 0
    rhs ExportCap
    lhs<rhs penalty 0}
  case NegSlope{
    condition RS_m_3_sv <= 0.0
    rhs 999999.
    lhs<rhs penalty 0}
  case HighCost{
    condition RS_Sac_ZeroExp_sv2 >= ANNcap
    rhs ExportCap
    lhs<rhs penalty 0}
  case LargeNegInt{
    condition RS_b_3_sv < -10000.0
    rhs 999999.
    lhs<rhs penalty 0}  
  case NegCarriage{
    condition RS_m_3_sv >= 1.0
    rhs 999999.
    lhs<rhs penalty 0}
  case Normal {
    condition always
    rhs RS_m_3_sv*C_SACtot_ANN + RS_b_3_sv
    lhs<rhs penalty 0}
}
