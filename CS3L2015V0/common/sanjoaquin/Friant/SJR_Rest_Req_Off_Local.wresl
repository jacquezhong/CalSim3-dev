!***************************************************************************************************************************************
!<license>
!    Copyright (C) 2017, 2018 State of California, Department of Water Resources. This file is part of the CalSim 3.

!    The CalSim 3 is free software: !<license>

!    you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free
!    Software Foundation, either version 3 of the License, or(at your option) any later version.

!    CalSim 3 is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
!    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

!    You should have received a copy of the GNU General Public License along with CalSim 3.  If not, see <http://www.gnu.org/licenses>.
!</license>
!****************************************************************************************************************************************

! SJR_Rest_Req.wresl

! Retrieve SJR Restoration Settlement flow requirements.
! This file is included in Cycle 1 and uses average monthly values for the 
! restoration flow requirements.  This sets up water supply, snowmelt release,
! and flood control operations at Friant and allows the solution for the overall
! volume movement of water in the month.  

define SJRR_rel_taf {select release from SJRR_Reqs_off where month=month}
define SJRR_rel {value SJRR_rel_taf*taf_cfs}

define SJRR_relDV {alias SJRR_rel kind 'flow-min-requirement' units 'cfs'}

! restrict the release from Friant to be the restoration release target
! this value includes Gravelly Ford diversions and losses.  Set the segment
! of flow below Gravelly Ford as the actual restoration flow - this will be
! passed on to the restoration channel in SJR_Restrict.wresl
goal boundC18main { C18m < SJRR_rel  }
define SJRR_L605 {value max(0., min(SJRR_rel - C18_min*taf_cfs, 0.05*(SJRR_rel - C18_min*taf_cfs) + 95.))}
goal setC603_mainSJRR {C603_mainSJRR < max(0.,SJRR_rel - C18_min*taf_cfs - SJRR_L605)}

goal set_D603 { D603 < 0.4 * min(SJRR_rel, C18_min * taf_cfs) }
goal set_L603 { L603 = min(SJRR_rel, C18_min * taf_cfs) - D603 }

goal lim_I18_rest_bal {I18_rest_bal < max(0., SJRR_rel - SJRR_mon - max(0., (SJRR_mon - I18 - (sio_fwua(-1)-s18level1-S17level1)*taf_cfs)*30./14. ))}

goal set_C18A { C18A < Fr_snow_rel * taf_cfs}
